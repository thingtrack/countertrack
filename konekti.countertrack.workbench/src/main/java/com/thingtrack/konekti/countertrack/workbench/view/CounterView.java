package com.thingtrack.konekti.countertrack.workbench.view;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import com.invient.vaadin.charts.Color.RGB;
import com.invient.vaadin.charts.InvientCharts;
import com.invient.vaadin.charts.InvientCharts.DecimalPoint;
import com.invient.vaadin.charts.InvientCharts.Series;
import com.invient.vaadin.charts.InvientCharts.SeriesType;
import com.invient.vaadin.charts.InvientCharts.XYSeries;
import com.invient.vaadin.charts.InvientChartsConfig;
import com.invient.vaadin.charts.InvientChartsConfig.AxisBase.AxisTitle;
import com.invient.vaadin.charts.InvientChartsConfig.AxisBase.AxisTitleAlign;
import com.invient.vaadin.charts.InvientChartsConfig.BarConfig;
import com.invient.vaadin.charts.InvientChartsConfig.CategoryAxis;
import com.invient.vaadin.charts.InvientChartsConfig.DataLabel;
import com.invient.vaadin.charts.InvientChartsConfig.HorzAlign;
import com.invient.vaadin.charts.InvientChartsConfig.Legend;
import com.invient.vaadin.charts.InvientChartsConfig.Legend.Layout;
import com.invient.vaadin.charts.InvientChartsConfig.NumberYAxis;
import com.invient.vaadin.charts.InvientChartsConfig.Position;
import com.invient.vaadin.charts.InvientChartsConfig.VertAlign;
import com.invient.vaadin.charts.InvientChartsConfig.XAxis;
import com.invient.vaadin.charts.InvientChartsConfig.YAxis;
import com.thingtrack.countertrack.domain.Context;
import com.thingtrack.countertrack.domain.Counter;
import com.thingtrack.countertrack.service.api.ConfigurationService;
import com.thingtrack.countertrack.service.api.CounterService;
import com.thingtrack.konekti.countertrack.workbench.MainApplication;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnGenerator;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

@SuppressWarnings("serial")
public class CounterView extends LocaleComponent {

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Table dgCounter;
	@AutoGenerated
	private HorizontalLayout hlToolBarCounter;
	@AutoGenerated
	private Button btnRefresh;
	@AutoGenerated
	private Button btnNextWeek;
	@AutoGenerated
	private Label lblValue;
	@AutoGenerated
	private Button btnPreviousWeek;
	@AutoGenerated
	private VerticalLayout totlLayout;
	@AutoGenerated
	private Table dgTotalizer;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
		
	private InvientCharts countsChart;
	private InvientChartsConfig chartConfig; 
	
	private final static int IN = 1;	
	private final static int OUT = 0;
	
	private int IN_Counts;	
	private int OUT_Counts;		
	
	private List <Counter> counters;	
	private BeanItemContainer<Counter> bsCounter = new BeanItemContainer<Counter>(Counter.class);

	private ConfigurationService configurationService;
	private CounterService counterService;
	private Context context;
	
	private int weeks = 0;
	
	private static final String DEVICE_NAME_KEY = "DEVICE_NAME";
	
	private String inSeriesName = "Conteos Entrantes";
	private String outSeriesName = "Conteos Salientes";
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public CounterView() {
		IN_Counts = 0;
		OUT_Counts = 0;
		
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		getServices();
	
		// initialize datasource views
		initView();
	}

	public void initView() {		
		// initialize Slide View Organization View
		dgCounter.setImmediate(true);
		dgCounter.setSelectable(true);
		dgCounter.setPageLength(20);
		
		btnNextWeek.setEnabled(false);
		
		lblValue.setValue(weeks);
		lblValue.setStyleName(Reindeer.LABEL_H2);
		
		refreshBindindSource();
		
		// STEP 01: create grid view for slide Organization View
		try {			
			counters = getAllWeek(weeks);
			for (int i=0; i<counters.size(); i++) {
				if ((counters.get(i)).getWay() == IN)
					IN_Counts ++;
				else if ((counters.get(i)).getWay() == OUT)
					OUT_Counts ++;
			}
			
			dgTotalizer.setCaption("RESUMEN CONTEOS");
			dgTotalizer.addContainerProperty("Conteos Entrantes", Integer.class,  null);
			dgTotalizer.addContainerProperty("Conteos Salientes", Integer.class, null);
			dgTotalizer.addContainerProperty("Total conteos", Integer.class,  null);
			dgTotalizer.addItem(new Object[] {new Integer(IN_Counts), new Integer(OUT_Counts), new Integer(counters.size())}, new Integer(1));
			
			dgCounter.setCaption("DETALLE CONTEOS");
			dgCounter.setContainerDataSource(bsCounter);
			dgCounter.addGeneratedColumn(wayColumn.WAY_COLUMN_ID, new wayColumn());
			dgCounter.setVisibleColumns(new String[] { "countDate", "deviceName", wayColumn.WAY_COLUMN_ID });
			dgCounter.setColumnHeaders(new String[] { "Fecha", "Dispositivo", "Sentido" });	
			//dgMattrack.setVisibleColumns(new String[] { "counterId", "countDate", "deviceName", wayColumn.WAY_COLUMN_ID });
			//dgMattrack.setColumnHeaders(new String[] { "Identificador de conteo", "Fecha", "Dispositivo", "Sentido" });					

			//dgMattrack.setColumnCollapsed("counterId", true);
			
		} catch (Exception ex) {
			throw new RuntimeException("¡No se pudo refrescar los Conteos!", ex);
		}
		
		try {
			totlLayout.addComponent(graph());
		} catch (Exception ex) {
			throw new RuntimeException("¡No se pudo añadir la Gráfica de Conteos!", ex);
		}
		
		totlLayout.setExpandRatio(countsChart, 1.0f);
		
		btnPreviousWeek.setStyleName(Button.STYLE_LINK);
		btnPreviousWeek.setDescription("Semana Anterior");

		btnPreviousWeek.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {					
				weeks ++;
				
				if (weeks == 0)
					btnNextWeek.setEnabled(false);
				else
					btnNextWeek.setEnabled(true);
				
				refreshBindindSource();
				refreshTotals();
				refreshSeries();
				
				lblValue.setValue(weeks);
			}
		});
		
		btnNextWeek.setStyleName(Button.STYLE_LINK);
		btnNextWeek.setDescription("Semana Siguiente");

		btnNextWeek.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {					
				weeks--;
				
				if (weeks == 0)
					btnNextWeek.setEnabled(false);
				else
					btnNextWeek.setEnabled(true);
				
				refreshBindindSource();
				refreshTotals();
				refreshSeries();
				
				lblValue.setValue(weeks);
			}
		});
		
		btnRefresh.setStyleName(Button.STYLE_LINK);
		btnRefresh.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {				
				refreshBindindSource();
				refreshTotals();
				refreshSeries();
				
				lblValue.setValue(weeks);
				
			}
		});

	}
	
	public void refreshCounts(Counter counter) {
		refreshBindindSource();
		refreshTotals();
		refreshSeries();
		
		lblValue.setValue(weeks);
		
	}
	
	private void refreshTotals() {
		try {
			IN_Counts = 0;
			OUT_Counts = 0;
			
			dgTotalizer.removeAllItems();	
			counters = getAllWeek(weeks);
			for (int i=0; i<counters.size(); i++) {
				if ((counters.get(i)).getWay() == IN)
					IN_Counts++;
				else if ((counters.get(i)).getWay() == OUT)
					OUT_Counts++;
			}
			
			dgTotalizer.addItem(new Object[] {new Integer(IN_Counts), new Integer(OUT_Counts), new Integer(counters.size())}, new Integer(1));
				
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo refrescar los Conteos!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo refrescar los Conteos!", e);
		}
	}
	
	private InvientCharts graph() throws Exception {        
		chartConfig = new InvientChartsConfig();
		chartConfig.getGeneralChartConfig().setType(SeriesType.BAR);
		chartConfig.getTitle().setText("Histórico Conteos");		
        chartConfig.getSubtitle().setText("Fuente: DEV01");
                
        CategoryAxis xAxisMain = new CategoryAxis();
        List<String> categories = counterService.getAllWeekDays(weeks);
        xAxisMain.setCategories(categories);
        LinkedHashSet<XAxis> xAxesSet = new LinkedHashSet<InvientChartsConfig.XAxis>();
        xAxesSet.add(xAxisMain);
        chartConfig.setXAxes(xAxesSet);

        NumberYAxis yAxis = new NumberYAxis();
        yAxis.setMin(0.0);
        yAxis.setTitle(new AxisTitle("Conteos"));
        yAxis.getTitle().setAlign(AxisTitleAlign.HIGH);
        LinkedHashSet<YAxis> yAxesSet = new LinkedHashSet<InvientChartsConfig.YAxis>();
        yAxesSet.add(yAxis);
        chartConfig.setYAxes(yAxesSet);

        chartConfig.getTooltip().setFormatterJsFunc("function() {"
                                + " return '' + this.series.name +': '+ this.y +'';"
                                + "}");

        BarConfig barCfg = new BarConfig();
        barCfg.setDataLabel(new DataLabel());
        chartConfig.addSeriesConfig(barCfg);

        Legend legend = new Legend();
        legend.setLayout(Layout.VERTICAL);
        legend.setPosition(new Position());
        legend.getPosition().setAlign(HorzAlign.RIGHT);
        legend.getPosition().setVertAlign(VertAlign.TOP);
        legend.getPosition().setX(-100);
        legend.getPosition().setY(100);
        legend.setFloating(true);
        legend.setBorderWidth(1);
        legend.setBackgroundColor(new RGB(255, 255, 255));
        legend.setShadow(true);
        chartConfig.setLegend(legend);

        chartConfig.getCredit().setEnabled(false);

        countsChart = new InvientCharts(chartConfig);
        countsChart.setWidth("100.0%");
        countsChart.setHeight("100.0%");
        
        LinkedHashMap<String, Integer> resume = counterService.getAllWeekGrouped(weeks);
        
        XYSeries seriesData = new XYSeries(inSeriesName);
        seriesData.setSeriesPoints(getINPoints(seriesData, resume));
        countsChart.addSeries(seriesData);

        seriesData = new XYSeries(outSeriesName);
        seriesData.setSeriesPoints(getOUTPoints(seriesData, resume));
        countsChart.addSeries(seriesData);
        
        return countsChart;
	}
	
	private static LinkedHashSet<DecimalPoint> getINPoints(Series series, LinkedHashMap<String, Integer> values) {
        LinkedHashSet<DecimalPoint> points = new LinkedHashSet<DecimalPoint>();
        
        Iterator<Entry<String, Integer>> it = values.entrySet().iterator();        
        while(it.hasNext()) {
        	 Map.Entry<String, Integer> entry = it.next();
        	 String aux =  entry.getKey().toString();
        	 String[] temp = aux.split("\\|");
        	 
        	 if (temp[1].equals("1"))
        		 points.add(new DecimalPoint(series, Double.parseDouble(entry.getValue().toString())));
        }
        	                      
        return points;
    }
	
	private void refreshSeries() {
		CategoryAxis xAxisMain = new CategoryAxis();
        List<String> categories;
		try {
			categories = counterService.getAllWeekDays(weeks);
		} catch (Exception ex) {
			throw new RuntimeException("¡No se pudo refrescar las Semana!", ex);
		}
        xAxisMain.setCategories(categories);
        LinkedHashSet<XAxis> xAxesSet = new LinkedHashSet<InvientChartsConfig.XAxis>();
        xAxesSet.add(xAxisMain);
        chartConfig.setXAxes(xAxesSet);
        
		countsChart.removeSeries("Conteos Entrantes");
		countsChart.removeSeries("Conteos Salientes");
		
		LinkedHashMap<String, Integer> resume;
		try {
			resume = counterService.getAllWeekGrouped(weeks);
		} catch (Exception ex) {
			throw new RuntimeException("¡No se pudo refrescar las Series!", ex);			
		}
        
        XYSeries seriesData = new XYSeries("Conteos Entrantes");
        seriesData.setSeriesPoints(getINPoints(seriesData, resume));
        countsChart.addSeries(seriesData);

        seriesData = new XYSeries("Conteos Salientes");
        seriesData.setSeriesPoints(getOUTPoints(seriesData, resume));
        countsChart.addSeries(seriesData);
	}
	
	private static LinkedHashSet<DecimalPoint> getOUTPoints(Series series, LinkedHashMap<String, Integer> values) {
        LinkedHashSet<DecimalPoint> points = new LinkedHashSet<DecimalPoint>();
        
        Iterator<Entry<String, Integer>> it = values.entrySet().iterator();        
        while(it.hasNext()) {
        	 Map.Entry<String, Integer> entry = it.next();
        	 String aux =  entry.getKey().toString();
        	 String[] temp = aux.split("\\|");
        	 
        	 if (temp[1].equals("0"))
        		 points.add(new DecimalPoint(series, Double.parseDouble(entry.getValue().toString())));
        }
        	              
        return points;
    }
	
	private void refreshBindindSource() {
		try {						
			bsCounter.removeAllItems();
			bsCounter.addAll(getAllWeek(weeks));
	
		} catch (IllegalArgumentException e) {
			throw new RuntimeException("¡No se pudo refrescar los Conteos!", e);
		} catch (Exception e) {
			throw new RuntimeException("¡No se pudo refrescar los Conteos!", e);
		}
	}
	
	private List<Counter> getAllWeek(int week) {
		List<Counter> counts = new ArrayList<Counter>();
		
		try {
			counts = counterService.getAllWeek(week);
		} catch (Exception ex) {
			throw new RuntimeException("¡No se pudo crear los días de la semana!", ex);
		}
		
		return counts;
	}
	
	private void getServices() {
		this.context = MainApplication.get().getAppContext();
		
		this.configurationService = MainApplication.get().getConfigurationService();
		this.counterService = MainApplication.get().getCounterService();
	}
	
	@Override
	protected void updateLabels() {
		btnPreviousWeek.setDescription(getI18N().getMessage("btnPreviousWeek.description"));
		btnNextWeek.setDescription(getI18N().getMessage("btnNextWeek.description"));
		btnRefresh.setDescription(getI18N().getMessage("btnRefreshScanData.description"));
		
		dgTotalizer.setColumnHeaders(new String[] { getI18N().getMessage("dgTotalizer.in"),
												    getI18N().getMessage("dgTotalizer.out"),
												    getI18N().getMessage("dgTotalizer.total")});
		
		dgCounter.setColumnHeaders(new String[] { getI18N().getMessage("dgCounter.columnCountDate"),
												  getI18N().getMessage("dgCounter.colummCountDevice"),
												  getI18N().getMessage("dgCounter.colummCountDirection")});
		
		chartConfig.getTitle().setText(getI18N().getMessage("chartConfig.tittle"));
		chartConfig.getSubtitle().setText(getI18N().getMessage("chartConfig.subTittle", context.getDeviceName()));
				
		countsChart.getSeries(inSeriesName).setName(getI18N().getMessage("countsChart.inSeriesName"));
		inSeriesName = getI18N().getMessage("countsChart.inSeriesName");
				
		countsChart.getSeries(outSeriesName).setName(getI18N().getMessage("countsChart.outSeriesName"));
		outSeriesName = getI18N().getMessage("countsChart.outSeriesName");
		
		countsChart.requestRepaint();
	
	}

	private class wayColumn implements ColumnGenerator {
		static final String WAY_COLUMN_ID = "way_column-id";

		@Override
		public Object generateCell(Table source, Object itemId, Object columnId) {
			Label countsLabel = new Label();

			Counter counter = (Counter) itemId;

			if (counter.getWay() == IN)
				countsLabel.setValue("Entrante");				
			else if (counter.getWay() == OUT) 
				countsLabel.setValue("Saliente");

			return countsLabel;
		}

	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// totlLayout
		totlLayout = buildTotlLayout();
		mainLayout.addComponent(totlLayout);
		mainLayout.setExpandRatio(totlLayout, 1.0f);
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		mainLayout.addComponent(verticalLayout_1);
		
		return mainLayout;
	}

	@AutoGenerated
	private VerticalLayout buildTotlLayout() {
		// common part: create layout
		totlLayout = new VerticalLayout();
		totlLayout.setImmediate(false);
		totlLayout.setWidth("100.0%");
		totlLayout.setHeight("100.0%");
		totlLayout.setMargin(false);
		totlLayout.setSpacing(true);
		
		// dgTotalizer
		dgTotalizer = new Table();
		dgTotalizer.setImmediate(false);
		dgTotalizer.setWidth("100.0%");
		dgTotalizer.setHeight("70px");
		totlLayout.addComponent(dgTotalizer);
		
		return totlLayout;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("550px");
		verticalLayout_1.setHeight("100.0%");
		verticalLayout_1.setMargin(false);
		
		// hlToolBarCounter
		hlToolBarCounter = buildHlToolBarCounter();
		verticalLayout_1.addComponent(hlToolBarCounter);
		
		// dgCounter
		dgCounter = new Table();
		dgCounter.setImmediate(false);
		dgCounter.setWidth("100.0%");
		dgCounter.setHeight("100.0%");
		verticalLayout_1.addComponent(dgCounter);
		verticalLayout_1.setExpandRatio(dgCounter, 1.0f);
		
		return verticalLayout_1;
	}

	@AutoGenerated
	private HorizontalLayout buildHlToolBarCounter() {
		// common part: create layout
		hlToolBarCounter = new HorizontalLayout();
		hlToolBarCounter.setImmediate(false);
		hlToolBarCounter.setWidth("100.0%");
		hlToolBarCounter.setHeight("-1px");
		hlToolBarCounter.setMargin(true);
		
		// btnPreviousWeek
		btnPreviousWeek = new Button();
		btnPreviousWeek.setIcon(new ThemeResource(
				"../countertrack/icons/arrow-180.png"));
		btnPreviousWeek.setImmediate(true);
		btnPreviousWeek.setDescription("Semana previa");
		btnPreviousWeek.setWidth("-1px");
		btnPreviousWeek.setHeight("-1px");
		hlToolBarCounter.addComponent(btnPreviousWeek);
		hlToolBarCounter.setExpandRatio(btnPreviousWeek, 1.0f);
		hlToolBarCounter.setComponentAlignment(btnPreviousWeek, new Alignment(
				34));
		
		// lblValue
		lblValue = new Label();
		lblValue.setImmediate(false);
		lblValue.setWidth("-1px");
		lblValue.setHeight("-1px");
		lblValue.setValue("Label");
		hlToolBarCounter.addComponent(lblValue);
		hlToolBarCounter.setComponentAlignment(lblValue, new Alignment(48));
		
		// btnNextWeek
		btnNextWeek = new Button();
		btnNextWeek
				.setIcon(new ThemeResource("../countertrack/icons/arrow.png"));
		btnNextWeek.setImmediate(true);
		btnNextWeek.setDescription("Semana siguiente");
		btnNextWeek.setWidth("-1px");
		btnNextWeek.setHeight("-1px");
		hlToolBarCounter.addComponent(btnNextWeek);
		hlToolBarCounter.setComponentAlignment(btnNextWeek, new Alignment(34));
		
		// btnRefresh
		btnRefresh = new Button();
		btnRefresh.setIcon(new ThemeResource(
				"../countertrack/icons/arrow-circle-double.png"));
		btnRefresh.setImmediate(true);
		btnRefresh.setWidth("-1px");
		btnRefresh.setHeight("-1px");
		hlToolBarCounter.addComponent(btnRefresh);
		hlToolBarCounter.setComponentAlignment(btnRefresh, new Alignment(34));
		
		return hlToolBarCounter;
	}
}
