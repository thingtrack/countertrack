package com.thingtrack.konekti.countertrack.workbench.view;

import com.thingtrack.konekti.countertrack.workbench.MainApplication;
import com.thingtrack.countertrack.domain.User;
import com.thingtrack.countertrack.service.api.UserService;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.ShortcutAction;
import com.vaadin.event.ShortcutListener;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;

@SuppressWarnings("serial")
public class SecurityView extends LocaleComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Label lblCopyRight;
	@AutoGenerated
	private Panel pnMainPanel;
	@AutoGenerated
	private VerticalLayout securityLayout;
	@AutoGenerated
	private HorizontalLayout registrationLayout;
	@AutoGenerated
	private Button btnForgot;
	@AutoGenerated
	private Button btnCreateAccount;
	@AutoGenerated
	private Label lblSeparator;
	@AutoGenerated
	private VerticalLayout buttonLayout;
	@AutoGenerated
	private Button btnOk;
	@AutoGenerated
	private VerticalLayout logonLayout;
	@AutoGenerated
	private HorizontalLayout passwordLayout;
	@AutoGenerated
	private TextField passwordText;
	@AutoGenerated
	private HorizontalLayout usernameLayout;
	@AutoGenerated
	private TextField usernameText;
	@AutoGenerated
	private Embedded logo;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private UserService userService;
	
	// navigator button listeners
	private ClickRegistrationButtonListener listenerRegistrationButton = null;
	private ClickForgotButtonListener listenerForgotButton = null;
	
	//private String password = "";

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public SecurityView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here				
		getServices();

		pnMainPanel.addStyleName("login");
		usernameText.addStyleName("login");
		passwordText.addStyleName("login");

		logonLayout.addStyleName("login");
		securityLayout.addStyleName("security");
		
		usernameText.setNullRepresentation("");
		usernameText.setInputPrompt("Username");
		
		usernameText.addShortcutListener(new ShortcutListener("Login", ShortcutAction.KeyCode.ENTER, null) {			
			@Override
			public void handleAction(Object sender, Object target) {
				login();

			}
		});

		passwordText.setNullRepresentation("");
		passwordText.setInputPrompt("Password");
		/*passwordText.setTextChangeTimeout(10);
		
		passwordText.addListener(new TextChangeListener() {			
			@Override
			public void textChange(TextChangeEvent event) {									
				if (password.length() > event.getText().length())
					password = password.substring(0, event.getCursorPosition()) + "" + password.substring(event.getCursorPosition() + 1);								
				else
					password = password + event.getText();				
								
				passwordText.setValue(event.getText().replaceAll(".", "*"));
			}
		});*/

		btnOk.setStyleName(Button.STYLE_LINK);
		btnOk.addStyleName("login");
		
		btnOk.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				login();

			}
		});
		
		btnCreateAccount.setStyleName(Button.STYLE_LINK);
		btnCreateAccount.addStyleName("createaccount");
		
		btnCreateAccount.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				if (listenerRegistrationButton != null)
					listenerRegistrationButton.buttonClick(event);
			}
		});
		
		btnForgot.setStyleName(Button.STYLE_LINK);
		btnForgot.addStyleName("forgot");
		
		btnForgot.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {				
				if (listenerForgotButton != null)
					listenerForgotButton.buttonClick(event);
			}
		});
	}

	private void login() {
		try {
			User user = userService.getByUser(usernameText.getValue().toString(), passwordText.getValue().toString());

			if (!user.getActive()) {
				getApplication().getMainWindow().showNotification(getI18N().getMessage("unactiveUser.notification"), Notification.TYPE_WARNING_MESSAGE);
				
				return;
			}
			
			MainApplication.get().setUser(user);
		} catch (Exception e) {
			getApplication().getMainWindow().showNotification(getI18N().getMessage("invalidUser.notification"), Notification.TYPE_ERROR_MESSAGE);

			usernameText.setValue(null);
			passwordText.setValue(null);

			//password = "";

			btnOk.focus();

			return;
		}

		MainApplication.get().logonWorkbench();
	}

	private void getServices() {
		this.userService = MainApplication.get().getUserService();

	}

	public void addListenerRegistrationButton(ClickRegistrationButtonListener listener) {
		this.listenerRegistrationButton = listener;
		
	}
	
	public void addListenerForgotButton(ClickForgotButtonListener listener) {
		this.listenerForgotButton = listener;
		
	}
	
	public interface ClickRegistrationButtonListener extends ClickListener {

    }

	public interface ClickForgotButtonListener extends ClickListener {

    }		
	
	@Override
	protected void updateLabels() {
		usernameText.setInputPrompt(getI18N().getMessage("usernameText.inputPrompt"));
		usernameText.setDescription(getI18N().getMessage("usernameText.description"));
		passwordText.setInputPrompt(getI18N().getMessage("passwordText.inputPrompt"));
		passwordText.setDescription(getI18N().getMessage("passwordText.description"));
		btnOk.setCaption(getI18N().getMessage("btnOk.caption"));
		btnOk.setDescription(getI18N().getMessage("btnOk.description"));
		btnCreateAccount.setCaption(getI18N().getMessage("btnCreateAccount.caption"));
		btnCreateAccount.setDescription(getI18N().getMessage("btnCreateAccount.description"));
		btnForgot.setCaption(getI18N().getMessage("btnForgot.caption"));
		btnForgot.setDescription(getI18N().getMessage("btnForgot.description"));
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// logo
		logo = new Embedded();
		logo.setImmediate(false);
		logo.setWidth("-1px");
		logo.setHeight("-1px");
		logo.setSource(new ThemeResource("../countertrack/logo/LogoWeb.png"));
		logo.setType(1);
		logo.setMimeType("image/png");
		mainLayout.addComponent(logo);
		mainLayout.setComponentAlignment(logo, new Alignment(60));
		
		// pnMainPanel
		pnMainPanel = buildPnMainPanel();
		mainLayout.addComponent(pnMainPanel);
		mainLayout.setExpandRatio(pnMainPanel, 1.0f);
		mainLayout.setComponentAlignment(pnMainPanel, new Alignment(48));
		
		// lblCopyRight
		lblCopyRight = new Label();
		lblCopyRight.setStyleName("copyright");
		lblCopyRight.setImmediate(false);
		lblCopyRight.setWidth("-1px");
		lblCopyRight.setHeight("-1px");
		lblCopyRight
				.setValue("Â©Copyright Konekti 2010-2013. <a href='http://www.thingtrack.com' target='_blank'> thingtrack.com </a>");
		lblCopyRight.setContentMode(3);
		mainLayout.addComponent(lblCopyRight);
		mainLayout.setExpandRatio(lblCopyRight, 1.0f);
		mainLayout.setComponentAlignment(lblCopyRight, new Alignment(20));
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPnMainPanel() {
		// common part: create layout
		pnMainPanel = new Panel();
		pnMainPanel.setImmediate(false);
		pnMainPanel.setWidth("360px");
		pnMainPanel.setHeight("320px");
		
		// securityLayout
		securityLayout = buildSecurityLayout();
		pnMainPanel.setContent(securityLayout);
		
		return pnMainPanel;
	}

	@AutoGenerated
	private VerticalLayout buildSecurityLayout() {
		// common part: create layout
		securityLayout = new VerticalLayout();
		securityLayout.setImmediate(false);
		securityLayout.setWidth("100.0%");
		securityLayout.setHeight("100.0%");
		securityLayout.setMargin(true);
		securityLayout.setSpacing(true);
		
		// logonLayout
		logonLayout = buildLogonLayout();
		securityLayout.addComponent(logonLayout);
		
		// buttonLayout
		buttonLayout = buildButtonLayout();
		securityLayout.addComponent(buttonLayout);
		securityLayout.setExpandRatio(buttonLayout, 1.0f);
		securityLayout.setComponentAlignment(buttonLayout, new Alignment(6));
		
		// lblSeparator
		lblSeparator = new Label();
		lblSeparator.setImmediate(false);
		lblSeparator.setWidth("100.0%");
		lblSeparator.setHeight("-1px");
		lblSeparator.setValue("<hr/>");
		lblSeparator.setContentMode(3);
		securityLayout.addComponent(lblSeparator);
		
		// registrationLayout
		registrationLayout = buildRegistrationLayout();
		securityLayout.addComponent(registrationLayout);
		securityLayout.setComponentAlignment(registrationLayout, new Alignment(
				6));
		
		return securityLayout;
	}

	@AutoGenerated
	private VerticalLayout buildLogonLayout() {
		// common part: create layout
		logonLayout = new VerticalLayout();
		logonLayout.setImmediate(false);
		logonLayout.setWidth("100.0%");
		logonLayout.setHeight("130px");
		logonLayout.setMargin(true);
		logonLayout.setSpacing(true);
		
		// usernameLayout
		usernameLayout = buildUsernameLayout();
		logonLayout.addComponent(usernameLayout);
		
		// passwordLayout
		passwordLayout = buildPasswordLayout();
		logonLayout.addComponent(passwordLayout);
		logonLayout.setExpandRatio(passwordLayout, 1.0f);
		
		return logonLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildUsernameLayout() {
		// common part: create layout
		usernameLayout = new HorizontalLayout();
		usernameLayout.setImmediate(false);
		usernameLayout.setWidth("100.0%");
		usernameLayout.setHeight("40px");
		usernameLayout.setMargin(false);
		usernameLayout.setSpacing(true);
		
		// usernameText
		usernameText = new TextField();
		usernameText.setImmediate(true);
		usernameText.setWidth("100.0%");
		usernameText.setHeight("40px");
		usernameLayout.addComponent(usernameText);
		usernameLayout.setExpandRatio(usernameText, 1.0f);
		usernameLayout.setComponentAlignment(usernameText, new Alignment(6));
		
		return usernameLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildPasswordLayout() {
		// common part: create layout
		passwordLayout = new HorizontalLayout();
		passwordLayout.setImmediate(false);
		passwordLayout.setWidth("100.0%");
		passwordLayout.setHeight("100.0%");
		passwordLayout.setMargin(false);
		passwordLayout.setSpacing(true);
		
		// passwordText
		passwordText = new TextField();
		passwordText.setImmediate(false);
		passwordText.setWidth("100.0%");
		passwordText.setHeight("40px");
		passwordLayout.addComponent(passwordText);
		passwordLayout.setExpandRatio(passwordText, 1.0f);
		passwordLayout.setComponentAlignment(passwordText, new Alignment(6));
		
		return passwordLayout;
	}

	@AutoGenerated
	private VerticalLayout buildButtonLayout() {
		// common part: create layout
		buttonLayout = new VerticalLayout();
		buttonLayout.setImmediate(false);
		buttonLayout.setWidth("100.0%");
		buttonLayout.setHeight("100.0%");
		buttonLayout.setMargin(false);
		
		// btnOk
		btnOk = new Button();
		btnOk.setCaption("Log In");
		btnOk.setImmediate(true);
		btnOk.setWidth("-1px");
		btnOk.setHeight("-1px");
		buttonLayout.addComponent(btnOk);
		buttonLayout.setComponentAlignment(btnOk, new Alignment(34));
		
		return buttonLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildRegistrationLayout() {
		// common part: create layout
		registrationLayout = new HorizontalLayout();
		registrationLayout.setImmediate(false);
		registrationLayout.setWidth("-1px");
		registrationLayout.setHeight("50px");
		registrationLayout.setMargin(false);
		
		// btnCreateAccount
		btnCreateAccount = new Button();
		btnCreateAccount.setCaption("Create Account");
		btnCreateAccount.setImmediate(true);
		btnCreateAccount.setWidth("-1px");
		btnCreateAccount.setHeight("-1px");
		registrationLayout.addComponent(btnCreateAccount);
		registrationLayout.setExpandRatio(btnCreateAccount, 1.0f);
		registrationLayout.setComponentAlignment(btnCreateAccount,
				new Alignment(48));
		
		// btnForgot
		btnForgot = new Button();
		btnForgot.setCaption("Forgot");
		btnForgot.setImmediate(true);
		btnForgot.setWidth("-1px");
		btnForgot.setHeight("-1px");
		registrationLayout.addComponent(btnForgot);
		registrationLayout.setExpandRatio(btnForgot, 1.0f);
		registrationLayout.setComponentAlignment(btnForgot, new Alignment(34));
		
		return registrationLayout;
	}

}