package com.thingtrack.konekti.countertrack.workbench.view;

import java.util.Locale;

import org.vaadin.artur.icepush.ICEPush;

import com.thingtrack.countertrack.domain.Counter;
import com.thingtrack.konekti.countertrack.workbench.MainApplication;
import com.thingtrack.konekti.countertrack.workbench.ui.MainToolBar;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.data.Property.ValueChangeListener;

@SuppressWarnings("serial")
public class WorkbenchView extends LocaleComponent {	
	private VerticalLayout workbenchLayout;
	
	private HorizontalLayout locationLayout;
	private ComboBox cmbLanguage;	
	private Label lblLanguage;
	
	private HorizontalLayout mainToolBarLayout;
	private MainToolBar mainToolBar;
	
	private HorizontalLayout viewToolBarLayout;
	
	private VerticalLayout sensorManagementLayout;
	private CounterView counterView;
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public WorkbenchView() {
		buildMainLayout();
		setCompositionRoot(workbenchLayout);

		// TODO add user code here
	}
	
	public WorkbenchView(ICEPush pusher) {
		buildMainLayout();
		setCompositionRoot(workbenchLayout);

		// TODO add user code here
		
		workbenchLayout.addComponent(pusher);
		
	}
	
	public void refreshCounts(Counter counter) {
		counterView.refreshCounts(counter);
		
	}
	
	public VerticalLayout getSensorManagementLayout() {
		return this.sensorManagementLayout;
		
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// set Main Sensor Track Layout
		workbenchLayout = new VerticalLayout();
		workbenchLayout.setSizeFull();
	    workbenchLayout.setMargin(true);	    
	    workbenchLayout.setStyleName("applicationBackground");

	    // set Location Selector layout		
	    locationLayout = new HorizontalLayout();
	    locationLayout.setWidth("100%");
	    locationLayout.setHeight("-1px");
	    
		lblLanguage = new Label();
		lblLanguage.setImmediate(false);
		lblLanguage.setWidth("-1px");
		lblLanguage.setHeight("-1px");
		lblLanguage.setValue("Language:");
		lblLanguage.setStyleName("language");
		locationLayout.addComponent(lblLanguage);
		locationLayout.setExpandRatio(lblLanguage, 1.0f);
		locationLayout.setComponentAlignment(lblLanguage, new Alignment(34));
		
		cmbLanguage = new ComboBox();
		cmbLanguage.setImmediate(true);
		cmbLanguage.setWidth("-1px");
		cmbLanguage.setHeight("-1px");
		cmbLanguage.setNullSelectionAllowed(false);
		cmbLanguage.setStyleName("language");
		locationLayout.addComponent(cmbLanguage);
		locationLayout.setComponentAlignment(cmbLanguage, new Alignment(6));
		
		cmbLanguage.addItem("Español");
		cmbLanguage.addItem("English");
		cmbLanguage.addItem("简体中文");
		
		// set language selected 
		if (MainApplication.get().getI18n().getCurrentLocale().getLanguage().equals("es"))
			cmbLanguage.setValue("Español");
		else if (MainApplication.get().getI18n().getCurrentLocale().getLanguage().equals("en"))
			cmbLanguage.setValue("English");
		else if (MainApplication.get().getI18n().getCurrentLocale().getLanguage().equals("zh"))
			cmbLanguage.setValue("简体中文");
		else
			cmbLanguage.setValue("English");
			
		cmbLanguage.addListener(new ValueChangeListener() {			
			@Override
			public void valueChange(ValueChangeEvent event) {
				if (event.getProperty().getValue().toString().equals("Español"))
					MainApplication.get().getI18n().setCurrentLocale(new Locale("es"));
				else if (event.getProperty().getValue().toString().equals("English"))
					MainApplication.get().getI18n().setCurrentLocale(new Locale("en"));
				else if (event.getProperty().getValue().toString().equals("简体中文"))
					MainApplication.get().getI18n().setCurrentLocale(new Locale("zh"));
				else
					MainApplication.get().getI18n().setCurrentLocale(new Locale("en"));
				
			}
		});
		
		workbenchLayout.addComponent(locationLayout);
		workbenchLayout.setExpandRatio(locationLayout, 0.0f);
		
	    // set Main Toolbar		
		mainToolBarLayout = new HorizontalLayout();
		mainToolBarLayout.setWidth("100%");
		mainToolBarLayout.setHeight("50px");
		mainToolBarLayout.setStyleName("toolbar");
        
		mainToolBar = new MainToolBar();
		mainToolBar.setSizeFull();		
		mainToolBarLayout.addComponent(mainToolBar);
		
		workbenchLayout.addComponent(mainToolBarLayout);
		workbenchLayout.setExpandRatio(mainToolBarLayout, 0.0f);
		
		// set Konekti Map Main Layout
		sensorManagementLayout = new VerticalLayout();
		sensorManagementLayout.setMargin(true);
		sensorManagementLayout.setSizeFull();
		sensorManagementLayout.setStyleName("mapdesigner");
				
		counterView = new CounterView();
		counterView.setSizeFull();
	
		// initialize Sensor Track View
		sensorManagementLayout.addComponent(counterView);
		
		workbenchLayout.addComponent(sensorManagementLayout);
		workbenchLayout.setExpandRatio(sensorManagementLayout, 1.0f);
		
		return workbenchLayout;
	}

	@Override
	protected void updateLabels() {
		lblLanguage.setValue(getI18N().getMessage("lblLanguage.description"));
		
	}

}
