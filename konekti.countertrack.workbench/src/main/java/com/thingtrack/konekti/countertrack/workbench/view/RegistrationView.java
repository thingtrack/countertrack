package com.thingtrack.konekti.countertrack.workbench.view;

import javax.mail.MessagingException;

import com.thingtrack.konekti.countertrack.workbench.MainApplication;
import com.thingtrack.konekti.countertrack.workbench.service.MailService;
import com.thingtrack.konekti.countertrack.workbench.service.MailServiceImpl;
import com.thingtrack.countertrack.domain.User;
import com.thingtrack.countertrack.service.api.UserService;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;

@SuppressWarnings("serial")
public class RegistrationView extends LocaleComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Label lblCopyRight;
	@AutoGenerated
	private Panel pnMainPanel;
	@AutoGenerated
	private VerticalLayout securityLayout;
	@AutoGenerated
	private HorizontalLayout toolBarLayout;
	@AutoGenerated
	private Button btnConfirm;
	@AutoGenerated
	private Button btnCancel;
	@AutoGenerated
	private Label lblSeparator;
	@AutoGenerated
	private VerticalLayout logonLayout;
	@AutoGenerated
	private TextField phoneText;
	@AutoGenerated
	private TextField passwordText;
	@AutoGenerated
	private TextField usernameText;
	@AutoGenerated
	private TextField fullNameText;
	@AutoGenerated
	private Embedded logo;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	
	private UserService userService;
	private MailService mailService = new MailServiceImpl();
	
	private User userRegistered;
	
	private ClickConfirmRegistrationButtonListener listenerConfirmRegistrationButton = null;
	
	private static final String SUBJECT = "Registration KBuilding Email";	
	
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public RegistrationView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		getServices();

		pnMainPanel.addStyleName("login");
		
		logonLayout.addStyleName("createaccount");
		securityLayout.addStyleName("security");
		
		fullNameText.addStyleName("login");
		fullNameText.setInputPrompt("Full name");
		fullNameText.setNullRepresentation("");
		
		usernameText.addStyleName("login");
		usernameText.setInputPrompt("Your email");
		usernameText.setNullRepresentation("");
		
		passwordText.addStyleName("login");
		passwordText.setInputPrompt("Password");
		passwordText.setNullRepresentation("");
		
		phoneText.addStyleName("login");
		phoneText.setInputPrompt("Phone number");
		phoneText.setRequiredError(phoneText.getCaption() + " is a required field");
		phoneText.setNullRepresentation("");
		
		btnConfirm.setStyleName(Button.STYLE_LINK);
		btnConfirm.addStyleName("login");		
		btnConfirm.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				// check components view
				if (fullNameText.getValue() == null || fullNameText.getValue().toString().isEmpty()) {
					getApplication().getMainWindow().showNotification(getI18N().getMessage("fullNameNotNull.notification"), Notification.TYPE_ERROR_MESSAGE);
						
					return;								
					
				}
				
				if (usernameText.getValue() == null || usernameText.getValue().toString().isEmpty()) {
					getApplication().getMainWindow().showNotification(getI18N().getMessage("emailNotNull.notification"), Notification.TYPE_ERROR_MESSAGE);
					
					return;
													
				}
				
				if (passwordText.getValue() == null || passwordText.getValue().toString().isEmpty()) {
					getApplication().getMainWindow().showNotification(getI18N().getMessage("passwordNotNull.notification"), Notification.TYPE_ERROR_MESSAGE);
					
					return;
													
				}
				
				// check if already exist any user with this email						
				if (existUser())				
					return;
				
				// register new unactive user in DB
				if (!addUser())
					return;
				
				// send confirmation email to the user
				sendEmail();
				
				// confirmation message
				getApplication().getMainWindow().showNotification(getI18N().getMessage("userRegistered.notification"), Notification.TYPE_HUMANIZED_MESSAGE);
				
				if (listenerConfirmRegistrationButton != null)
					listenerConfirmRegistrationButton.buttonClick(event);
				
			}
		});
		
		btnCancel.setStyleName(Button.STYLE_LINK);
		btnCancel.addStyleName("login");		
		btnCancel.addListener(new ClickListener() {			
			@Override
			public void buttonClick(ClickEvent event) {
				if (listenerConfirmRegistrationButton != null)
					listenerConfirmRegistrationButton.buttonClick(event);
				
			}
		});

	}

	private boolean addUser() {
		try {			
			// register save the new user
			userRegistered = new User();
			
			userRegistered.setFullName(fullNameText.getValue().toString());
			userRegistered.setEmail(usernameText.getValue().toString());
			userRegistered.setPassword(passwordText.getValue().toString());
			userRegistered.setPhone(phoneText.getValue().toString());
			userRegistered.setActive(false);
			userRegistered.setRegistrationCode(calculateSecurityHash(userRegistered.getEmail(),"MD2") + 
					                           calculateSecurityHash(userRegistered.getEmail(),"MD5") +
					                           calculateSecurityHash(userRegistered.getEmail(),"SHA1"));
			
			userService.save(userRegistered);

		} catch (Exception e) {
			getApplication().getMainWindow().showNotification(getI18N().getMessage("errorUserRegistered.notification"), Notification.TYPE_ERROR_MESSAGE);
			
			btnConfirm.focus();

			return false;
		}

		return true;
	}

	private boolean existUser() {
		// show warning message and return if exist one
		try {
			userService.getUserRecovery(usernameText.getValue().toString());
			
			getApplication().getMainWindow().showNotification(getI18N().getMessage("alreadyUserRegistered.notification"), Notification.TYPE_WARNING_MESSAGE);
			
			return true;
		
		} catch (Exception e) {
			return false;
			
		}
		
	}
	
	private void sendEmail() {		
		String uri = MainApplication.get().getBaseURI() + "?registrationCode=" + userRegistered.getRegistrationCode();
		
		try {
			mailService.sendEmailSSL(getI18N().getMessage("emailHeade.text"), getI18N().getMessage("emailRegistration.notification", uri, uri, uri), userRegistered.getEmail());
		} catch (MessagingException e) {
			System.out.println("Error: " + e.getMessage());
		}

	}
	
	private String calculateSecurityHash(String stringInput, String algorithmName) throws java.security.NoSuchAlgorithmException {
		String hexMessageEncode = "";
		byte[] buffer = stringInput.getBytes();
		
		java.security.MessageDigest messageDigest = java.security.MessageDigest.getInstance(algorithmName);
		messageDigest.update(buffer);
		byte[] messageDigestBytes = messageDigest.digest();
		
		for (int index=0; index < messageDigestBytes.length ; index ++) {
			int countEncode = messageDigestBytes[index] & 0xff;
			if (Integer.toHexString(countEncode).length() == 1) hexMessageEncode = hexMessageEncode + "0";
			hexMessageEncode = hexMessageEncode + Integer.toHexString(countEncode);
		}
		
		return hexMessageEncode;
	}
	
	private void getServices() {
		this.userService = MainApplication.get().getUserService();

	}

	public void addListenerConfirmRegistrationButton(ClickConfirmRegistrationButtonListener listener) {
		this.listenerConfirmRegistrationButton = listener;
		
	}
	
	public interface ClickConfirmRegistrationButtonListener extends ClickListener {

    }
	
	@Override
	protected void updateLabels() {
		fullNameText.setInputPrompt(getI18N().getMessage("fullNameText.inputPrompt"));
		fullNameText.setDescription(getI18N().getMessage("fullNameText.description"));
		usernameText.setInputPrompt(getI18N().getMessage("usernameText.inputPrompt"));
		usernameText.setDescription(getI18N().getMessage("usernameText.description"));
		passwordText.setInputPrompt(getI18N().getMessage("passwordText.inputPrompt"));
		passwordText.setDescription(getI18N().getMessage("passwordText.description"));
		phoneText.setInputPrompt(getI18N().getMessage("phoneText.inputPrompt"));
		phoneText.setDescription(getI18N().getMessage("phoneText.description"));
		btnConfirm.setCaption(getI18N().getMessage("btnConfirm.caption"));
		btnConfirm.setDescription(getI18N().getMessage("btnConfirm.description"));
		btnCancel.setCaption(getI18N().getMessage("btnCancel.caption"));
		btnCancel.setDescription(getI18N().getMessage("btnCancel.description"));
		
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// logo
		logo = new Embedded();
		logo.setImmediate(false);
		logo.setWidth("-1px");
		logo.setHeight("-1px");
		logo.setSource(new ThemeResource("../countertrack/logo/LogoWeb.png"));
		logo.setType(1);
		logo.setMimeType("image/png");
		mainLayout.addComponent(logo);
		mainLayout.setComponentAlignment(logo, new Alignment(60));
		
		// pnMainPanel
		pnMainPanel = buildPnMainPanel();
		mainLayout.addComponent(pnMainPanel);
		mainLayout.setExpandRatio(pnMainPanel, 1.0f);
		mainLayout.setComponentAlignment(pnMainPanel, new Alignment(48));
		
		// lblCopyRight
		lblCopyRight = new Label();
		lblCopyRight.setStyleName("copyright");
		lblCopyRight.setImmediate(false);
		lblCopyRight.setWidth("-1px");
		lblCopyRight.setHeight("-1px");
		lblCopyRight
				.setValue("©Copyright Konekti 2010-2013. <a href='http://www.thingtrack.com' target='_blank'> thingtrack.com </a>");
		lblCopyRight.setContentMode(3);
		mainLayout.addComponent(lblCopyRight);
		mainLayout.setExpandRatio(lblCopyRight, 1.0f);
		mainLayout.setComponentAlignment(lblCopyRight, new Alignment(20));
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildPnMainPanel() {
		// common part: create layout
		pnMainPanel = new Panel();
		pnMainPanel.setImmediate(false);
		pnMainPanel.setWidth("360px");
		pnMainPanel.setHeight("350px");
		
		// securityLayout
		securityLayout = buildSecurityLayout();
		pnMainPanel.setContent(securityLayout);
		
		return pnMainPanel;
	}

	@AutoGenerated
	private VerticalLayout buildSecurityLayout() {
		// common part: create layout
		securityLayout = new VerticalLayout();
		securityLayout.setImmediate(false);
		securityLayout.setWidth("100.0%");
		securityLayout.setHeight("-1px");
		securityLayout.setMargin(true);
		securityLayout.setSpacing(true);
		
		// logonLayout
		logonLayout = buildLogonLayout();
		securityLayout.addComponent(logonLayout);
		securityLayout.setExpandRatio(logonLayout, 1.0f);
		
		// lblSeparator
		lblSeparator = new Label();
		lblSeparator.setImmediate(false);
		lblSeparator.setWidth("100.0%");
		lblSeparator.setHeight("-1px");
		lblSeparator.setValue("<hr/>");
		lblSeparator.setContentMode(3);
		securityLayout.addComponent(lblSeparator);
		
		// horizontalLayout_1
		toolBarLayout = buildHorizontalLayout_1();
		securityLayout.addComponent(toolBarLayout);
		
		return securityLayout;
	}

	@AutoGenerated
	private VerticalLayout buildLogonLayout() {
		// common part: create layout
		logonLayout = new VerticalLayout();
		logonLayout.setImmediate(false);
		logonLayout.setWidth("100.0%");
		logonLayout.setHeight("100.0%");
		logonLayout.setMargin(true);
		logonLayout.setSpacing(true);
		
		// fullNameText
		fullNameText = new TextField();
		fullNameText.setImmediate(false);
		fullNameText.setDescription("Full Name");
		fullNameText.setWidth("100.0%");
		fullNameText.setHeight("40px");
		fullNameText.setRequired(true);
		logonLayout.addComponent(fullNameText);
		
		// usernameText
		usernameText = new TextField();
		usernameText.setImmediate(true);
		usernameText.setDescription("Username");
		usernameText.setWidth("100.0%");
		usernameText.setHeight("40px");
		usernameText.setRequired(true);
		logonLayout.addComponent(usernameText);
		
		// passwordText
		passwordText = new TextField();
		passwordText.setImmediate(false);
		passwordText.setDescription("Password");
		passwordText.setWidth("100.0%");
		passwordText.setHeight("40px");
		passwordText.setRequired(true);
		logonLayout.addComponent(passwordText);
		
		// phoneText
		phoneText = new TextField();
		phoneText.setImmediate(false);
		phoneText.setDescription("Phone Number");
		phoneText.setWidth("100.0%");
		phoneText.setHeight("40px");
		logonLayout.addComponent(phoneText);
		
		return logonLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_1() {
		// common part: create layout
		toolBarLayout = new HorizontalLayout();
		toolBarLayout.setImmediate(false);
		toolBarLayout.setWidth("100.0%");
		toolBarLayout.setHeight("50px");
		toolBarLayout.setMargin(false);
		toolBarLayout.setSpacing(true);
		
		// btnCancel
		btnCancel = new Button();
		btnCancel.setCaption("Cancel");
		btnCancel.setImmediate(true);
		btnCancel.setWidth("-1px");
		btnCancel.setHeight("-1px");
		toolBarLayout.addComponent(btnCancel);
		toolBarLayout.setExpandRatio(btnCancel, 1.0f);
		toolBarLayout.setComponentAlignment(btnCancel, new Alignment(34));
		
		// btnConfirm
		btnConfirm = new Button();
		btnConfirm.setCaption("Confirm");
		btnConfirm.setImmediate(true);
		btnConfirm.setWidth("-1px");
		btnConfirm.setHeight("-1px");
		toolBarLayout.addComponent(btnConfirm);
		toolBarLayout.setComponentAlignment(btnConfirm, new Alignment(34));
		
		return toolBarLayout;
	}

}